package Solved_051_075;

/**
 * Cyclical figurate numbers
 * Problem 61
 * 
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
 * are all figurate (polygonal) numbers and are generated by the following
 * formulae:
 * Triangle P_3,n=n(n+1)/2		1, 3, 6, 10, 15, ...
 * Square P_4,n=n2				1, 4, 9, 16, 25, ...
 * Pentagonal P_5,n=n(3n-1)/2	1, 5, 12, 22, 35, ...
 * Hexagonal P_6,n=n(2n-1)		1, 6, 15, 28, 45, ...
 * Heptagonal P_7,n=n(5n-3)/2	1, 7, 18, 34, 55, ...
 * Octagonal P_8,n=n(3n-2)		1, 8, 21, 40, 65, ...
 * 
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
 * interesting properties.
 * 
 * The set is cyclic, in that the last two digits of each number is the first
 * two digits of the next number (including the last number with the first).
 * Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
 * pentagonal (P5,44=2882), is represented by a different number in the set.
 * This is the only set of 4-digit numbers with this property.
 * 
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which
 * each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
 * octagonal, is represented by a different number in the set.
 */
public class PE061_Cyclical_figurate_numbers {
	private static int len[] = new int[9];
	private static int numbers[] = new int[6];
	private static int p[][] = new int[9][10000];
	private static boolean used[] = new boolean[9];

	public static void main(String[] args) {
		long start = System.nanoTime();

		int result = 0;

		for (int i = 3; i <= 8; ++i) {
			int ln = 0;

			for (int n = 1;; ++n) {
				int pn = n * (2 + (i - 2) * (n - 1)) / 2;

				if (pn >= 10000) {
					break;
				}
				
				if (pn < 1000) {
					continue;
				}

				p[i][ln++] = pn;
			}

			len[i] = ln;
		}

		used[3] = true;

		for (int i = 0; i < len[3]; ++i) {
			numbers[0] = p[3][i];

			if (find(1)) {
				break;
			}
		}

		for (int i = 0; i < 6; ++i) {
			result += numbers[i];
		}

		long end = System.nanoTime();
		long runtime = end - start;
		System.out.println(result);
		System.out.println("Runtime: " + runtime / 1000000 + "ms (" + runtime
				+ "ns)");
	}

	private static boolean find(int ind) {
		if (ind == 6) {
			if (numbers[5] % 100 == numbers[0] / 100) {
				return true;
			}
			
			return false;
		}

		int end = numbers[ind - 1] % 100;

		for (int i = 3; i < 9; ++i) {
			if (!used[i]) {
				used[i] = true;

				for (int j = 0; j < len[i]; ++j) {
					if (p[i][j] / 100 == end) {
						numbers[ind] = p[i][j];

						if (find(ind + 1)) {
							return true;
						}
					}
				}
				
				used[i] = false;
			}
		}

		return false;
	}
}
